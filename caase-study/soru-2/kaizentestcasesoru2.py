# -*- coding: utf-8 -*-
"""kaizentestcasesoru2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mNoDXDlkHroEuFfbw4VS8Fp_LkRmrwco
"""

#Proje iki şekilde yapılmıştır bir tansi gogle cloud vison api ile diğeri pyteseract ile

!pip install --upgrade pip
!pip install --upgrade google-api-python-client

import getpass
import json
from googleapiclient.discovery import build
APIKEY = getpass.getpass()

import IPython.display

IPython.display.Image(url="https://i.ibb.co/Bj1yQSz/fis.png",
                      width=600)

IMAGE="https://i.ibb.co/Bj1yQSz/fis.png"
vservice = build('vision', 'v1', developerKey=APIKEY)
request = vservice.images().annotate(body={
        'requests': [{
                'image': {
                    'source': {
                        'imageUri': IMAGE
                    }
                },
                'features': [{
                    'type': 'TEXT_DETECTION',
                    'maxResults': 5,
                }]
            }],
        })
responses = request.execute(num_retries=5)
print(responses['responses'][0]['textAnnotations'][0]['description'])

x = responses['responses'][0]['textAnnotations']
y = json.dumps(x, indent=4)

print(y)

!pip install pytesseract # resimden yazıya dönüştürme
from PIL import Image ,ImageEnhance #resim preprocess ve dosya okuma
!sudo apt-get install tesseract-ocr-tur # türkçe karkterlerde hatayı önlemek için
import PIL
from pytesseract import image_to_string
import pytesseract
from IPython.display import display, Image #resim bastırmak için
import difflib # diblif ile okuma sırasında yanlış yazılan kelimeler düzeltiliyor 
import skimage # gama ayarı okuma doğruluğunu arttırıyor
import cv2
import json # output için
import numpy as np
from matplotlib import pyplot as plt # resim maipilasyonu
from google.colab.patches import cv2_imshow # collabde resim printlemek için kullanılan fonksiyo
from pytesseract import Output # resimden elde edilen veriyi farklı formatlarda elde edbilmek için
from skimage import data, exposure, img_as_float

#dosya açma
img = cv2.imread('fis.png')

#yeniden boyutlanma algoritmanın doğruluğunu ciddi dercede arttırıyor
img = cv2.resize(img, None, fx=5, fy=5, interpolation=cv2.INTER_CUBIC)

#Resimden gölgeleri çıkararak algoritmanın genel tutarlılığını artırma
rgb_planes = cv2.split(img)

result_planes = []
result_norm_planes = []
for plane in rgb_planes:
    dilated_img = cv2.dilate(plane, np.ones((7,7), np.uint8))
    bg_img = cv2.medianBlur(dilated_img, 21)
    diff_img = 255 - cv2.absdiff(plane, bg_img)
    norm_img = cv2.normalize(diff_img,None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8UC1)
    result_planes.append(diff_img)
    result_norm_planes.append(norm_img)

result = cv2.merge(result_planes)
result_norm = cv2.merge(result_norm_planes)

cv2.imwrite('shadows_out.png', result)

#gama ayarını arttrıp genel tutarlılığını artırma
img = cv2.imread('shadows_out.png',0)
gamma_corrected = exposure.adjust_gamma(img,3.3)






#resimdeki piksel değerlerine göre pikseli beyaz veya siyah olarak atayıp genel doğruluğu arttırıyo
gamma_corrected[gamma_corrected > 190] = 255

#resime blur attıktan sonra üstteki piksel işlemini tekrar uyguluyor bulanıklık harflar arasında silinmiş noktaları griye yaklaştırıp boşluk doldsurmaya yarıyor
final = cv2.blur(gamma_corrected,(3,3))
final[final < 200] = 0
final[final > 200] = 255

#cv2_imshow(final)
cv2.imwrite('final.png', final)

#pyteseract ile dosyayı yazıya çevirme Cola gibi kelimeleri okutken hatayı engellemek için ingilizce domates gibi kelimelerii okurken hatayı engellemk için türkçe 
vstr = pytesseract.image_to_string(final, lang='tur+eng')



#vbox = pytesseract.image_to_boxes(final, lang='tur+eng')
#vdata = pytesseract.image_to_boxes(final, lang='tur+eng')

a = cv2.imread('final.png')

# py eseract ile kelime ve kelme lokasyonu hakkında dataları alma
d = pytesseract.image_to_data(a, output_type=Output.DICT)

#fişin içindeki kelimeleri box olarak diconaryde saklama
n_boxes = len(d['text'])
for i in range(n_boxes):
    if int(d['conf'][i]) > -1:
        (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])
        a = cv2.rectangle(a, (x, y), (x + w, y + h), (0, 255, 0), 3)

#fişte geçebilecek kelimeleri bulup yanlış algıllanları düzelmek için data 
matchlist=["USTU","GUNEYDOGU","TOPKDV","TARIH","PARA",'KDV',"KDV'LI", 'DOMATES', 'EKMEK', 'PEYNİR' , "SÜT" , "YUMURTA" , "ISTANBUL" ,"MISIR" , "DONDURMA" , "KUTU" , "CAD" , "MAH"]
preva = "&/%&/"
for i in range(len(d["text"])):
  
  guessed = (difflib.get_close_matches(d["text"][i], matchlist))
 
  if( len(guessed) != 0 and( guessed[0]!= " " or guessed[0]!= "" and guessed != preva)):
    d["text"][i] = guessed[0]
    preva = guessed

cv2.imwrite('locations.png', a)
#cv2_imshow(a)

print(vstr)