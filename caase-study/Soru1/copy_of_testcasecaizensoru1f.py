# -*- coding: utf-8 -*-
"""Copy of testcasecaizensoru1F.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MIGiCiUxF2ks7gnsDWRxWIHGrWq233PH
"""

import json
 !pip install pycrypto
 from base64 import b64encode
 !pip install pycryptodomex
 from Crypto.Random import get_random_bytes
 from Cryptodome.Cipher import AES
 import itertools
import random
import math 
import time
import sympy
#algoritmanın genel mantığı kullanılabilecek tüm string değerleri arasından o çalışma seansı için belirlenmiş key ile enkripte edip enkripte edilmiş halde 
#patternlar aramaktır uygun bulunan stringler set data typında return edilir ve kontrol etmek için de key tekrar uygulanır AES_SİV algoritması Aynı key ve string değeri ile bire bir ve tersi olan bi fonksiyon olarak çalışır 
#Aessiv sayesinde kullanılan pattern tersine mühendislik ile kırlmasını çok zorlaştırır brute force koruması içinde valid pattern iyi seçilmelidir 
#aşağıda belirtilen değerler için brut forcun çalışma olasılığı 0.00026087612114774017
# key = b'7\xb2\xb17\xe3\xe7\xd8\xfay\xe51\xee\x18\x0bn\xc5\x8b^\x88 \xcc,\xe3\x8b\xf9(\xe8\x01d\x9a\x9c\xa8'
# nonce = b'p\xfb\xda#\x86\x88\xaf\xce;\t\x95\xa0"\xd4PY'
#Kodların üretilme süresi uzun ancak üretilen kodlara bakıp valid kod çıkarılması çok düşük olasılık

key = get_random_bytes(16 * 2)
nonce = get_random_bytes(16)
header = b"header"
chars = "ACDEFGHKLMNPRTXYZ234579234579"
chars = list(chars)
random.shuffle(chars)
chars = "".join(chars)

def encrypt(ip):
  data = str.encode(ip)
  cipher = AES.new(key, AES.MODE_SIV, nonce=nonce)                                             
  cipher.update(header)
  ciphertext, tag = cipher.encrypt_and_digest(data)
  return str(ciphertext)

def ChekCode(const):
  if(len(const) != 8):
    return False
  sum=0
  av = 0
  t = const
  m = encrypt(t)
  m = str(m)
  l = len(m)
  for i in m:
    av += ord(i)
    if(i in ["1","2","3","4","5","6","7","8","9"]):
      sum+=int(i)
  
  if((av+sum!=2)and(sympy.isprime(av) and sympy.isprime(sum)  and m.count("a") > 3) ):
    return True
  else:
    return False


def GenerateCodes():
  all = 0
  list_of_codes = []
  list_of_codes =set(list_of_codes)
  
  for i in itertools.combinations(chars, 8):
    counter = len(list_of_codes)
    all +=1
    txt = str("".join(i))
    #if(all%100000 == 0):
      #print(counter / all)
    if(counter==1000):
      print(counter / all)
      return list_of_codes
    if(ChekCode(txt)):
      counter += 1
      list_of_codes.add("".join(i))
  return list_of_codes

a=GenerateCodes()

zz=0
for i in a:
  if(ChekCode(i)):
    zz+=1
if(zz==len(a)):
  print("worksss")

print(a)

f = open("genarated.txt", "w")
for i in a:
  f.write(i+"\n")
f.close()

